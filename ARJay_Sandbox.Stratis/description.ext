dev = "ARJay";
author = "ARJAY";
onLoadName = "ARJay Sandbox";
onLoadMission = "A mission for ARMA 3 alpha testing editing and scripting.";
loadScreen = "load.paa";

class CfgFunctions {
    class Dictionary {
        class Dictionary {
            class new { description = "Returns a new empty dictionary. \nExample: _myDictionary = call Dictionary_fnc_new;"; };
            class get { description = "Returns the value of the key or objNull if the key doesn't exist. \nExample: [_myDictionary, _myKey] call Dictionary_fnc_get;"; };
            class set { description = "Sets the key to a new value. Overwrites the previous value if the key already existed. \nExample: [_myDictionary, _myNewKey, _myNewValue] call Dictionary_fnc_set;"; };
            class remove { description = "Removes a key from the dictionary. \nExample: _oldValue = [_myDictionary, _keyToRemove] call Dictionary_fnc_remove;"; };
            class isEmpty { description = "Returns true if the dictionary is empty. \nExample: _isDictionaryEmpty = _myDictionary call Dictionary_fnc_isEmpty;"; };
            class containsKey { description = "Returns true if the dictionary contains the key. \nExample: _dictionaryContainsKey = [_myDictionary, _myKey] call Dictionary_fnc_containsKey;"; };
            class containsValue { description = "Returns true if the dictionary contains the value. \nExample: _dictionaryContainsValue = [_myDictionary, _myValue] call Dictionary_fnc_containsValue;"; };
            class size { description = "Returns the number of elements in the dictionary. \nExample: _count = _myDictionary call Dictionary_fnc_size;"; };
            class keys { description = "Returns the keys as an array. \nExample: _keys = _myDictionary call Dictionary_fnc_keys;"; };
            class values { description = "Returns the values as an array. \nExample: _values = _myDictionary call Dictionary_fnc_values;"; };
        };
    };
};

class CfgNotifications
{
	class Default
	{
		title = ""; // Tile displayed as text on black background. Filled by arguments.
		iconPicture = ""; // Small icon displayed in left part. Colored by "color", filled by arguments.
		iconText = ""; // Short text displayed over the icon. Colored by "color", filled by arguments.
		description = ""; // Brief description displayed as structured text. Colored by "color", filled by arguments.
		color[] = {1,1,1,1}; // Icon and text color
		duration = 5; // How many seconds will the notification be displayed
		priority = 0; // Priority; higher number = more important; tasks in queue are selected by priority
		difficulty[] = {}; // Required difficulty settings. All listed difficulties has to be enabled
	};
	class TaskSucceeded
	{
		title = "%1";
		iconPicture = "\A3\ui_f\data\map\MapControl\taskicondone_ca.paa";
		description = "%2";
		priority = 7;
	};
	class TaskFailed
	{
		title = "%1";
		iconPicture = "\A3\ui_f\data\map\MapControl\taskiconfailed_ca.paa";
		description = "%2";
		priority = 6;
	};
	class TaskCanceled
	{
		title = "%1";
		iconPicture = "\A3\ui_f\data\map\MapControl\taskiconcanceled_ca.paa";
		description = "%2";
		priority = 5;
	};
	class TaskAssigned
	{
		title = "%1";
		iconPicture = "\A3\ui_f\data\map\MapControl\taskiconcreated_ca.paa";
		description = "%2";
		duration = 7;
		priority = 4;
	};
};